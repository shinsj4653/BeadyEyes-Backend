# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Deploy

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    # 기본 체크아웃
    - name: Checkout
      uses: actions/checkout@v3
    # Gradlew 실행 허용
    - name: Run chmod to make gradlew executable
      run: chmod +x ./gradlew
    # JDK 11 세팅
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    # 환경 변수 설정
    - name: Set environment values
      run: |
        cd ./src/main/resources
        touch ./application.properties
        echo "${{ secrets.APPLICATION_PROPERTIES }}" > application.properties
      shell: bash

    - name: Set storageAccountKey.json
      id: create-storage-account-key-json
      uses: jsdaniell/create-json@v1.1.2
      with:
        name: "storageAccountKey.json"
        json: ${{ secrets.STORAGE_ACCOUNT_KEY_JSON }}
        dir: "./src/main/resources"

    - name: Set serviceAccountKey.json
      id: create-service-account-key-json
      uses: jsdaniell/create-json@v1.1.2
      with:
        name: "serviceAccountKey.json"
        json: ${{ secrets.SERVICE_ACCOUNT_KEY_JSON }}
        dir: "./src/main/resources"
      #run: |
        #cd ./src/main/resources
        #touch ./serviceAccountKey.json
        #echo "${{ secrets.SERVICE_ACCOUNT_KEY_JSON }}" > serviceAccountKey.json
      #shell: bash
    
    
    # Gradle build (Test 제외)
    - name: Build with Gradle
      uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
      with:
        arguments: clean build -x test
    # Docker build
    - name: Docker build
      run: |
        docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
        docker buildx build --push --platform linux/amd64 -t ${{ secrets.DOCKERHUB_REPOSITORY }}:${GITHUB_SHA::7} .

    # deploy.sh 파일 -> 서버로 전달하기(복사 후 붙여넣기)
    #- name: Send deploy.sh
    #  uses: appleboy/scp-action@master
    #  with:
    #      host: ${{ secrets.SSH_HOST }}
    #      username: ${{ secrets.SSH_USERNAME }}
    #      key: ${{ secrets.SSH_PRIVATE_KEY }}
    #      port: 22
    #      source: "./deploy.sh"
    #      target: "/home/ubuntu/"

    # Deploy
    - name: Deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        envs: GITHUB_SHA
        script: | 
          sudo docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
          sudo docker pull ${{ secrets.DOCKERHUB_REPOSITORY }}:${GITHUB_SHA::7}
          sudo docker tag ${{ secrets.DOCKERHUB_REPOSITORY }}:${GITHUB_SHA::7} beadyeyes-spring
          sudo chmod 777 ./deploy.sh
          ./deploy.sh
          sudo docker image prune -f
